[ Test-2020-06-04 ] - Daun
 
1. 예전의 계산기 프로그램이 아래와 같이 에러가 난다. 예외처리를 구문을 적용하여, 죽지 않게 만드시오. ( 9분 )

첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:3
1 / 3 = 0
continue? Y or N:y
첫번째 숫자를 넣으세요:1
연산기호를 넣으세요:/
두번째 숫자를 넣으세요:0
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Calculator.execute(Calculator.java:34)
	at CalculatorTest.main(CalculatorTest.java:69)

[ Calculator.java ] package _0604

package _0604;

import java.util.InputMismatchException;
import java.util.Scanner;

public class Calculator {
	public static int add(int num1, int num2) {
		return num1 + num2;
	}

	public static int min(int num1, int num2) {
		return num1 - num2;
	}

	public static int mul(int num1, int num2) {
		return num1 * num2;
	}

	public static int div(int num1, int num2) {
		return num1 / num2;
	}

	void execute() {
		int num1, num2, result = 0;
		String op;
		char yn = 0;

		do {
			try {
				yn = 'y';

				Scanner sc = new Scanner(System.in);

				System.out.print("첫번째 숫자를 넣으세요:");
				num1 = sc.nextInt();

				System.out.print("연산 기호를 넣으세요:");
				op = sc.next();

				System.out.print("두번째 숫자를 넣으세요:");
				num2 = sc.nextInt();

				switch (op) {
				case "+":
					result = add(num1, num2);
					break;
				case "-":
					result = min(num1, num2);
					break;
				case "*":
					result = mul(num1, num2);
					break;
				case "/":
					result = div(num1, num2); // 0으로 나눌때 ArithmeticException
					break;
				default:
					break;
				}

				System.out.println(result);

				System.out.print("continue? Y or N:");
				yn = sc.next().charAt(0);
				if ((yn == 'n') || (yn == 'N')) {
					System.out.println("종료");
					break;
				}
			} catch (ArithmeticException e) {
				System.out.println(e.getMessage());
				System.out.println("0으로 나누면 안돼");
				continue;
			} catch (InputMismatchException e) {
				System.out.println("잘못 입력 하셨습니다.");
				continue;
			}
		} while ((yn == 'y') || (yn == 'Y'));

	}
}

[ CalculatorTest.java ] package _0604

package _0604;

public class CalculatorTest {

	public static void main(String[] args) {
		Calculator calculator = new Calculator();
		calculator.execute();
	}

}




2.  다음을 프로그램 하시오. (5분 + 2분)
interface Printable { // MS가 정의하고 제공한 인터페이스
   public void print(String doc);
}
 SPrinterDriver 와 LPrinterDriver를 만드시오
======================

public static void main(String[] args) {
   String myDoc = "This is a report about...";
   
   // 삼성 프린터로 출력
   Printable prn = new SPrinterDriver();
   prn.print(myDoc);
   System.out.println();

   // LG 프린터로 출력
   prn = new LPrinterDriver();
   prn.print(myDoc);
}
================================================
출력: From Samsung printer
This is a report about ...

From LG printer
This is a report about ...

[ PrintTest.java ] package test0604

package test0604;

interface Printable { // MS가 정의하고 제공한 인터페이스
	   public void print(String doc);
	}
class SPrinterDriver implements Printable{
	public void print(String doc) {
		System.out.println("From Samsung printer");
		System.out.println(doc);
	};
}

class LPrinterDriver implements Printable{
	public void print(String doc) {
		System.out.println("From LG printer");
		System.out.println(doc);
		
	};
}
public class PrintTest {

	public static void main(String[] args) {
		   String myDoc = "This is a report about...";
		   
		   // 삼성 프린터로 출력
		   Printable prn = new SPrinterDriver();
		   prn.print(myDoc);
		   System.out.println();

		   // LG 프린터로 출력
		   prn = new LPrinterDriver();
		   prn.print(myDoc);
	}

}

==console==
From Samsung printer
This is a report about ...

From LG printer
This is a report about ...




3.아래를 프로그래밍 하시오. (5분)
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
- 해당 배열중 넓이가 최대값을 찾아서 리턴

Rectangle[] rec = new Rectangle[3];
........
Rectangle maxRec = Rectangle.getMaxRec(rec);
System.out.println("최대사각형 넓이는" + maxRec.getArea());

[ Rectangle.java ] package test0604

package test0604;

import java.util.Scanner;

class Rectangle {
	private int width = 0, height = 0;

	Rectangle(int width, int height) {
		this.width = width;
		this.height = height;
	}

	int getArea() {
		return width * height;
	}

	static Rectangle getMaxRec(Rectangle[] recArr) {
		Rectangle max = recArr[0];
		for (Rectangle r : recArr) {
			if (max.getArea() < r.getArea()) {
				max = r;
			}
		}

		return max;

	}

[ RectangleTest.java ] package test0604

package test0604;

public class RectangleTest {

	public static void main(String[] args) {
		
		//3번
		Rectangle[] rec = new Rectangle[3];
		int width = 0, height = 0;
		Scanner scan = null;
		
		for (int i = 0; i < rec.length; i++) {
			scan = new Scanner(System.in);
			System.out.print("가로 : ");
			width=scan.nextInt();
			System.out.print("세로 : ");
			height=scan.nextInt();
			rec[i] = new Rectangle(width, height);
			System.out.println();
		}
		Rectangle maxRec = Rectangle.getMaxRec(rec);
		System.out.println("최대사각형 넓이는" + maxRec.getArea());

	}

}

==console==
가로 : 1
세로 : 1

가로 : 2
세로 : 2

가로 : 3
세로 : 3

최대사각형 넓이는9




4.아래를 프로그래밍 하시오. (10분)
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
-  getSortingRec 사각형 배열을 내림차순 정렬한다.
-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.

Rectangle[] rec = new Rectangle[3];
........
Rectangle[] recSorting = Rectangle.getSortingRec(rec);


[ RectangleTest.java ] package test0604

package test0604;

import java.util.Scanner;

class Rectangle {
	private int width = 0, height = 0;

	Rectangle(int width, int height) {
		this.width = width;
		this.height = height;
	}

	int getArea() {
		return width * height;
	}

	static Rectangle getMaxRec(Rectangle[] recArr) {
		Rectangle max = recArr[0];
		for (Rectangle r : recArr) {
			if (max.getArea() < r.getArea()) {
				max = r;
			}
		}

		return max;

	}

	static Rectangle[] getSortingRec(Rectangle[] arrRec) {
		Rectangle temp = null;

		// Bubble Sort
		for (int i = 0; i < arrRec.length; i++) {
			for (int j = 0; j < arrRec.length - i - 1; j++) { // 부등호 바꾸면 오름차순,내림차순
				if (arrRec[j].getArea() < arrRec[j + 1].getArea()) {
					temp = arrRec[j];
					arrRec[j] = arrRec[j + 1];
					arrRec[j + 1] = temp;
				}
			}

		}

		return arrRec;

	}

}

public class RectangleTest {

	public static void main(String[] args) {

		// 3번 - 배열에 담긴 사각형들 중 최대 사각형의 넓이를 구하기
		Rectangle[] rec = new Rectangle[3];
		int width = 0, height = 0;
		Scanner scan = null;

		for (int i = 0; i < rec.length; i++) {
			scan = new Scanner(System.in);
			System.out.print("가로 : ");
			width = scan.nextInt();
			System.out.print("세로 : ");
			height = scan.nextInt();
			rec[i] = new Rectangle(width, height);
			System.out.println();
		}
		Rectangle maxRec = Rectangle.getMaxRec(rec);
		System.out.println("최대사각형 넓이는" + maxRec.getArea());

		
		// 4번
		System.out.println("정렬 전");
		for (Rectangle r : rec) {
			System.out.print(r.getArea()+ "\t");
		}
		System.out.println();
		
		// 4번 - 배열에 담긴 사각형들을 넓이기준, 내림 차순으로 정렬
		Rectangle[] recSorting = Rectangle.getSortingRec(rec);

		

		System.out.println("정렬 후");
		for (Rectangle r : recSorting) {
			System.out.print(r.getArea() + "\t");
		}

	}

}

==console==
가로 : 2
세로 : 2

가로 : 1
세로 : 1

가로 : 3
세로 : 3

최대사각형 넓이는9

정렬 전
4	1	9	
정렬 후
9	4	1	