[ Test-2020-06-12 ]
1. 아래를  출력하시오.	(7분)
-(반복자 기반)
- (for-each문 기반)
HashMap<Integer, String> map = new HashMap<>();
   map.put(45, "Brown");
   map.put(37, "James");
   map.put(23, "Martin");


2. 아래의 List 객체에서 순차적 접근방법 3가지로 출력하시오.	(5분)
-list가 가지는 get
-enhenced for
-iterator 객체

   List<String> list = new LinkedList<>();   
   
   // 컬렉션 인스턴스에 문자열 인스턴스 저장
   list.add("Toy");
   list.add("Box");
   list.add("Robot");
=============


[ HashMapIteration.java ]

package test0612;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class HashMapIteration {

	public static void main(String[] args) {
		List<String> list = new LinkedList<>();

		// 컬렉션 인스턴스에 문자열 인스턴스 저장
		list.add("Toy");
		list.add("Box");
		list.add("Robot");

		// 1. list - get
		for (int i = 0; i < list.size(); i++) {
			System.out.print(list.get(i) + '\t');
		}

		
		// 2. enhenced for
		for(String l : list) {
			System.out.print(l+'\t');
		}System.out.println();
		
		// 3. iterator
		for (Iterator<String> itr = list.iterator(); itr.hasNext();) {
			System.out.print(itr.next().toString() + '\t');

		}
	}

}


3. hasSet을 이용하여 로또 번호를 뽑아내시오. (5분,5줄) ★암기★

[HashSetLotto.java]

package test0612;

import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class HashSetLotto {

	public static void main(String[] args) {
		Set<Integer> set = new HashSet<>();

		while (set.size() < 6) {
			int num = (int) (Math.random() * 45) + 1;
			System.out.println(num);
			set.add(new Integer(num));
		}

		// 데이터를 정렬하기 위해 Set-> List
		List<Integer> list = new LinkedList<Integer>(set);
		
		// 데이터 정렬
		Collections.sort(list);

		System.out.println(list);

	}

}

==console==
28
2
18
27
11
2
4
[2, 4, 11, 18, 27, 28]

4. 폼태그 (10분)

[0612test.html]

<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
	<form action ="#" method="get">
		이름 : <input type ="text" name="uname"/><br/>
		아이디 : <input type ="text" name="uid"/><br/>
		비밀번호 : <input type ="password" name="upw"/><br/>
		연락처  : <input type ="text" name="uphone1" size="5"/> - 
		<input type ="text" name="uphone2" size="5"/> -
		<input type ="text" name="uphone3" size="5"/> <br/>
		사진 : <input type ="file" name="upic"/><br/>
		성별구분 : <input type ="radio" name="gender" value="m"/>남,
		<input type ="radio" name="gender" value="w"/>여<br/>
		사용언어 : <input type ="checkbox" name="lan" value="kor" checked="checked"/>한
		<input type ="checkbox" name="lan" value="eng"/>영어,
		<input type ="checkbox" name="lan" value="jap"/>일어,
		<input type ="checkbox" name="lan" value="chi"/>중국어 <br/>
		자기소개 : <textarea rows="5" cols="20">간단하게 입력하세요.</textarea><br/>
		국적 : <select>
				<option>KOREA</option>
				<option>USA</option>
				<option>JAPAN</option>
				<option>CHINA</option>
			</select><br/>
		좋아하는음식 : <select multiple="multiple">
				<option>김치</option>
				<option>불고기</option>
				<option>파전</option>
				<option>비빔밥</option>
			</select><br/>
			<input type="submit"/>
	</form>

</body>
</html>


5. 아래를 구현 시키기 위한 Person 객체를 작성하시오. (10분)
TreeSet<Person> tree = new TreeSet<>(new PersonComparator());
   tree.add(new Person("YOON", 37));
   tree.add(new Person("HONG", 53));
   tree.add(new Person("PARK", 22));

   for(Person p : tree)
      System.out.println(p);
}

[ ComparablePerson.java ] ★암기 P.578 ★
package test0612;

import java.util.Comparator;
import java.util.TreeSet;

public class ComparablePerson {

	public static void main(String[] args) {
		TreeSet<Person> tree = new TreeSet<>(new PersonComparator());
		tree.add(new Person("YOON", 37));
		tree.add(new Person("HONG", 53));
		tree.add(new Person("PARK", 22));

		for (Person p : tree)
			System.out.println(p);

	}

}

class Person implements Comparable<Person> {
	String name;
	int age;

	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	@Override
	public String toString() {
		return name + " : " + age;
	}

	@Override
	public int compareTo(Person p) {
		return this.age - p.age;
	}
}

class PersonComparator implements Comparator<Person> {
	public int compare(Person p1, Person p2) {
		return p2.age - p1.age;

	}
}

==console==
HONG : 53
YOON : 37
PARK : 22