[ Test-2020-06-10 ]

1. 아래가 호출되도록 BoxFactory 클래스를 만드시오.	( 10분)

Box<String> sBox = BoxFactory.<String>makeBox("Sweet");
Box<Double> dBox = BoxFactory.<Double>makeBox(7.59);
System.out.println(sBox.get());
System.out.println(dBox.get());

[ GenericMethodTest.java ] [0] Test
package test0610;

class Box<T> {
	private T ob;
	
	// Getter method
	public T get() {
		return ob;
	}
	// Setter method
	public void set(T ob) {
		this.ob = ob;
	}

}

class BoxFactory {

	public static <T> Box<T> makeBox(T o) {
		Box<T> box = new Box<>();
		box.set(o);
		return box;
	}
}

public class GenericMethodTest {

	public static void main(String[] args) {

		Box<String> sBox = BoxFactory.<String>makeBox("Sweet");
		Box<Double> dBox = BoxFactory.<Double>makeBox(7.59);
		System.out.println(sBox.get());
		System.out.println(dBox.get());

	}

}

2. 아래의 interface 를 구현하시오. (3분)
interface IGugudan{
void gugudan();      //구구단 출력
}

[ GugudanTest.java ] [0] Test
package test0610;

interface IGugudan {
	void gugudan();
}

class Gugu implements IGugudan {
	public void gugudan() {
		for (int i = 1; i <= 9; i++) {
			for (int j = 1; j <= 9; j++) {
				System.out.print(i + "x" + j + "=" + (i * j) + "\t");
			}
			System.out.println();
		}
	};
}

public class GugudanTest {

	public static void main(String[] args) {
		Gugu g = new Gugu();
		g.gugudan();

	}

}


3. 아래의 Error 를 설명하시오. (5분)

lass Car extends Toy {...}    // 자동차 장난감
class Robot extends Toy {...}    // 로봇 장난감

class Box<T> {
   private T ob;
   public void set(T o) { ob = o; }
   public T get() { return ob; }
}

. . . 

public static void outBox(Box<? extends Toy> box) {
   box.get();   // 꺼내는 것! OK!
   box.set(new Toy());   // 넣는 것! ERROR!
}

[ Daun ]
public static void outBox(Box<? extends Toy> box) 를 하게되면, ?에는 Toy 또는 Toy를 상속하는 클래스가 올 수 있다.
근데, ?에 Toy의 하위 클래스가 오게 된다면,
자식.set(new 부모()); 가 되므로 하위 클래스에 상위 클래스의 인스턴스를 담게 되는데, 다형성에 어긋나게 된다.
그래서 set 메소드를 사용 할 수 없다.

4. 가위바위보 게임 객체지향적으로 (10분)

[ RPCTest.java ]
package withinterface;

import java.util.Random;
import java.util.Scanner;

import java.util.Random;
import java.util.Scanner;

/*전략(strategy) 디자인 패턴 적용*/
//애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시킨다.
/*디자인 원칙
- 애플리케이션에서 달라지는 부분을 찾아내고 달라지지 않는 부분으로 부터 분리시켜 캡슐화 한다. 
- 구현이 아닌 인터페이스에 맞쳐서 프로그래밍한다. 
- 상속보다 구성을 활용한다. ("A는 B이다" 보다 "A에는 B가 있다"가 나을 수 있다)
- 구성을 이용하여 시스템을 만들면 유연성을 크게 향상시킬 수 있다. 
- 알고리즘군을 별도의 클래스의 집합으로 캡슐화할 수 있도록 만들어 줄 뿐만 아니라, 실행시 행동을 바꿀있게 된다.
*/

interface RPCGetable{
   public static String[] RPC = {"가위","바위","보"};
   String generateRPC();   
}

class ComputerRPC  implements RPCGetable{

   @Override
   public String generateRPC() {
      Random random = new Random();
      int value = random.nextInt(3);
      
      return RPCGetable.RPC[value];      
   }   
}

class PersonRPC implements RPCGetable{
   
   public boolean isRPCString(String rpc) {
      boolean isRPC = false;
      
      for(String str : RPC) {
         if(rpc.trim().equals(str))
            return true;
      }      
      return isRPC;
   }
   
   @Override
   public String generateRPC() {
      System.out.println("가위 바위 보 입력하세요");
      Scanner scanner = null; 
      String personRPC;
      
      while(true) {
         try {         
            scanner = new Scanner(System.in);
            personRPC = scanner.next();            
            boolean isRPC = isRPCString(personRPC);
            
            if(isRPC == false) {
               System.out.println("잘못된 입력입니다. 다시 입력 해 주세요.");
               System.out.println("가위 바위 보 중에 하나를 넣어 주세요");
               continue;
            }else {
               break;
            }            
            
         } catch (Exception e) {
            e.printStackTrace();
            System.out.println("잘못된 입력입니다. 다시 입력 해 주세요.");
            continue;
         }   
      }
      return personRPC;
   }
}


class User {
   private String name;
   private String rpc;
   private String rpcNum;
   
   //전략패턴의 핵심
   /*상속이 아닌 구성을 활용*/
   RPCGetable rpcGetable;
   
   //주입
   //동적으로 가위바위보를 결정 알고리즘을 지정할수 있다
   public void setRpcGetable(RPCGetable rpcGetable) {
      this.rpcGetable = rpcGetable;
   }

   public void setRpc() {
      this.rpc = rpcGetable.generateRPC();
   }
   
   public int getRpcNum() {      
      for(int i=0;i<3;i++) {
         if(rpc.equals(RPCGetable.RPC[i])) {
            return i;
         }
      }      
      return 0;
   }
   
   public User(String name) {
      this.name = name;
   }
   
   public String getRpc() {
      return rpc;      
   }
   
   public void printCompare(User user) {
   
      System.out.println("-------- 가위 바위 보 !----------"); 
      System.out.printf("[ %s ] VS [ %s ] \n", this.name, user.name);
      
      int myNum = getRpcNum();
      int userNum = user.getRpcNum();
      
      
      if ((myNum == 0 && userNum == 0) || (myNum == 1 && userNum == 1) || (myNum == 2 && userNum == 2)){ 
            System.out.println(this.name + ":" + this.getRpc() + "  " + user.name + ":" + user.getRpc() +  " " +"무승부..."); 
      } else if ((myNum == 0 && userNum == 1) || (myNum == 1 && userNum == 2) || (myNum == 2 && userNum == 0)) { 
         System.out.println(this.name + ":" + this.getRpc() + "  " + user.name + ":" + user.getRpc() +" " +"당신의 패배ㅠㅠ"); 
      } 
      else if ((myNum == 0 && userNum == 2) || (myNum == 1 && userNum == 0) || (myNum == 2 && userNum == 1)) { 
         System.out.println(this.name + ":" + this.getRpc() + "  " + user.name + ":" + user.getRpc() + " " +"당신의 승리!");
      }
      
   }

}

class RPCGame{
   
   private static int count = 0; //횟수
   
   void execute() {
      User computer = new User("컴퓨터");
      computer.setRpcGetable(new ComputerRPC());
      
      User person = new User("사람");
      person.setRpcGetable(new PersonRPC());
      
      while(true) {
         
         computer.setRpc();
         person.setRpc();
         
         person.printCompare(computer);
         
         count++;
         System.out.println("현재는 " + count + "회 차입니다.");
         
      }
         
   }
         
}      
         
      
   


public class RPCTest {
   
   public static void main(String[] args) {
      RPCGame rpcGame = new RPCGame();
      rpcGame.execute();
   }
}


5. html로 표현하기. (5분)
□□□□
□가나□
□□□□

[ test0610.html ]
<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
	<table border="1">
		<tr>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td></td>
			<td colspan="2">가나다</td>
			<td></td>
		</tr>
		<tr>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	
	</table>
</body>
</html>